{"version":3,"sources":["Component/card/card.component.js","Component/card-list/card-list.js","Component/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAEaA,EAAM,SAACC,GAAD,OACf,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UACTC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACH,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHbC,EAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAwBA,QAASA,GAArBA,EAAQC,UCJnBM,G,MAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACpB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCwCCG,E,kDAxCb,aAAc,IAAD,8BACX,gBAeFH,aAAc,SAACI,GAEb,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAhBpC,EAAKC,MAAM,CACTb,SAAS,GACTU,YAAa,IAJJ,E,qDAUb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACvBF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACT,SAASkB,S,oBAQ1C,WAAS,IAAD,EACyBC,KAAKN,MAA7Bb,EADD,EACCA,SAAUU,EADX,EACWA,YAEXU,EAAkBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC7CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEhD,OACA,sBAAK9B,UAAU,MAAf,UACA,kDACE,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAnCVI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2c233424.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\nexport const Card= (props)=>(\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" \r\n        src={`https://robohash.org/${props.monster.id}?set=set3`}/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n    )","import React from 'react';\r\nimport './card-list-styles.css';\r\nimport {Card} from '../card/card.component'\r\n\r\nexport const CardList = props => (\r\n    <div className='card-list'>      \r\n        {props.monsters.map(monster=> (\r\n            <Card key= {monster.id} monster={monster}/>\r\n            //calling the Card component\r\n        ))}\r\n    </div>\r\n    );","import React from 'react';\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox= ({placeholder,handleChange})=>(\r\n    <input \r\n    className='search'\r\n    type='search' \r\n    placeholder={placeholder} \r\n    onChange={handleChange}\r\n      //  e=> {\r\n      //this.setState({searchField:e.target.value})\r\n        //,()=>console.log(this.state)) need to put this as 2nd paramater on setstate function for latest update\r\n    />\r\n);","import {Component} from 'react'\n//import logo from './logo.svg';\nimport './App.css';\nimport {CardList} from './Component/card-list/card-list.js'\nimport {SearchBox} from './Component/search-box/search-box.component.js'\n//import { render } from '@testing-library/react';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n      monsters:[],\n      searchField: ''\n    };\n    //this.handleChange=this.handleChange.bind(this); //binded manually, can be replaced by the arrow function\n    //class method passed this to it so handle's this means the this from the class\n  } \n  //lifecycle method==\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=> response.json())\n      .then(users=> this.setState({monsters:users}))\n  }\n\n  handleChange= (e) => {\n    //arrow function thats why it will bind the 'this' tp the one that was defined initially the app component\n    this.setState({searchField:e.target.value})\n  }\n\n  render(){\n    const{ monsters, searchField}= this.state;\n    //same as const monsters=this.state.monsters; searchField=this.state.searchField\n    const filteredMonsters= monsters.filter(monster=> \n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    \n      return (\n      <div className='App'>\n      <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder='Search monsters'\n          handleChange={this.handleChange}\n          />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n// as soon as setstate function is called we call back the render() function\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App /> \n  </React.StrictMode>,\n  document.getElementById('root')\n);/////renders the App, change root by what we getting from App\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}